exit
exut
question
@user.questions
@user.question
c
exit
@user.questions.include?(@question)
@user.questions.first == @question
@user.questions
@question.id
@question
@user.questions.include(@questionc
@user.questions.include(@question)
@user.questions.include(@questions)
@user.questions
@user.questuins
c
exit
@user.questions.count
@user.questions
q
:q
exit
@user.questions.sizeexit
@user.questions.size
@user.questions
@user
user.question
user.questions
user.questions.
user.questions.size
expect( delete :destroy, id: question).to change(user.questions, :count).by(-1)
user.questions
exit
user.questions
user
question.user
question
exit
question.user
question
@user.questions
exit
continue
user.questions
user
exit
sign_in user
sign_in 
sign_in user
cuurent_user
sign_in user
sign_in
user
expect(assigns(:user)).to eq(user)
expect(assign(:user)).to eq(user)
user
current_user
current_uer
exit
post new_user_session_path
exit
post new_user_session
post new_user_session_path
post new_user_session
post new_user_sesssino_path
cuurent_user
current_user
cuurent_user
@user
exit
@user
user
current_user
user
exit
user
user.authenticate
user
user.authenti
user.authenticated
user.authenticate
exit
assigns(:user)
assign(user)
assigns(user)
sign_in(user)
current_user
sign_in(user)
user
sign_in(user)
assigns(:user)
exit
assigns(:user)
assigns(:@user)
assigns(user)
assigns(:user)
sign_in(user)
assigns(:user)
expect(assigns(:user))
sign_in(user)
sign_in
exit
assigns(:user)
assigns(:users)
assigns(:user)
assigns(:questions)
assigns(:question)
assigns(:user)
assigngs(:user)
assigns(:use
assigngs(:user)
exit
users_path
show_users_path
show_user_path
user_path
exit
current_user
current)user
current-user
exit
User.first.questions
User.first.questions.push(Question.first)
Question.first
Question.last
Questions.first
Question.create(title: "title",body: "test")
Questions.first
Question.first
User.first.questions.push(Question.first)
User.first.questions.push(Questions.first)
User.first.questions.push(Question.first)
User.first.questions
User.first.question
User.first
User
exit
expect(page).to have_content("You need to sign in or sign up before continuing.")
exit
user[:password]
user
user.hash
user.methods.select { |method| puts method  }
user.methods.select { |method| puts "method"  }
user.methods.join("\n")
user.methods.join('\n')
user.methods
user
user.email
user
exit
current_user
byebug
exit
question.answers.count
assigns(:answers).count
exit
assigns(:answers)
exit
assigns(:answers)
exit
assigns(:answer)exit
assigns(:answer).all
assigns(:answer)
question.answers.count
question.answer.count
question.answers.push( create_list(:answer, 2) )
question.answers
exit
@question.answers.build
@answer = @question.answers.build
exit
page.all('p.body-answer', text: "another answer")
page.all('p.body-answer', text: "another answers")
page.all('p.body-answer', text: "another answer")
page.all('p.body-answer', text: "another")
page.all('p.body-answer')
exit
question_answers_path(question_id: @question)
@question
question
question_answers_path[question_id: @question.id]
question_answers_path[question_id: @question]
question_answers_path[question]
question_answers_path[@question]
question_answers_path
question_answers
question_answer
exit
page.all 'h1.title-question', text: "s"
page.all 'h1.title-question', text: "as"
page.all 'h1.title-question', text: "asdd"
page.all 'h1.title-question', text: "asdasd"
page.all 'h1.title-question', text: "s"
page.all 'h1.title-question', text: "s
page.all 'h1.title-question', text: question.title
expect(page.all('h1.title-question')).to have_content(question.title)
page.all('h1.title-question').to have_content(question.title)
page.all('h1.title-question').to have_content
page.all('h1.title-question')
exit
page.all('h1.title-question', text: question.body)exit
page.all('h1.title-question', text: question.body)
page.all('h1.title-question')
page.all('div')
page.all('div.title-question')
@question
page.all('div.title-question')
page.all('div')
page.all
exit
question.answers
question
exit
question.answers
question.answer
question
exit
Answer.all
exit
Answer.create( attributes_for :answer, question_id: question.id )
question
Answer.create( attributes_for :answer, question_id: question )
exit
Answer.all
Answer
3.times { Answer.create( attributes_for :answer ) }
attributes_for(:answer)
attributes_for
Answer.all
Answer
Answers
Answer
Answer.all
exit
expect(page.all('div.title-question').count).to eq 3
expect(page.all('div.title-question').count)
expect(page.all('div.title-question')).count
expect(page.all('div.title-question'))
expect(page.all('div'))
Question.all
Questions.all
exit
Question.all
Questions.all
Question.all
Question
exit
Question.allexit
Question.all
Question
Questions
page.all('div')
exit
